Este 17 nos tomaron sobre definición, clasificación y características de metáfora según Aristóteles y luego de un texto analizar dos metáforas teniendo en cuenta esas operaciones discursivas de Aristóteles.



Estudiante elMasEstudioso() {
			estudiante masEst=comisiones[0].inscriptos[0];
			int cantmat=cantidadAprobadas(masEst);
			for(comision co:this.comisiones) {
				for(Estudiante e:co.inscriptos) {
					if(cantidadAprobadas(e)>cantmat)}
				masEEst=ee;
				cantMat=cantidadAprobadas(e);
				
				}
			}
		return masEst;
		}


private int cantidadAprobadas(Estudiante masEst) {
	int cant=0;
	for(Comision cc:this.comisiones) {
		for(int i=0; i<cc.inscriptos.lenght;i++) {
			if(cc.inscriptos[i].equals(masEst))&&
			cc.calificaciones[i]>=4){
				cant++;
			}
		}
	}
	return cant;
}








public int  laMejorNota() {
	int mejorNota=0;
	for(Integer cal:this.calificaciones) {
		if(cal >mejorNota) {
			mejorNota=cal;
			
		}
	}
	return mejorNota;
}




public void alumnosConMejorNota() {
	int cantAlum=0;
	for(int i=0; i<this.inscriptos.length; i++) {
		if(this.calificaciones)[i]==MejorNota){
			cantAlum++;
		}
	}
	return cantAlum;




public int losMejores() {
	double mejorNota;
	int cantAlum=0;
	
	for(comision c: this.comisiones) {
		//calcula la mejor nota
		
		//cuento los alumnos que obtuvieron la mejor nota
		cantAlumn+=c.alumnosconMejorNota(c.lamejornota());
				
			}
		
		return cantAlum;
	}
}




AVION^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^



public class Aerolinea {
	Vuelo[] vuelos;
	int vuelosEn(Tripulante t, String tipoAvion) {
		int cant=0;
		for(Vuelo v:this.vuelos) {
			if(v.avion.tipo.equals(tipoAvion) &&
					v.estaTripulante(t)) {
				cant ++;
				
			}
		}
		
		
		return cant;
	}
	int antiguedadPromedio(String tipoAvion) {
		int cant=0;
		int sumaAnti=0;
		for (Vuelo v:this.vuelos) {
			if(v.avion.tipo.equals(tipoAvion)) {
				sumaAnti +=v.sumAntiguedad();
				cant++;
			}
		}
		
		return sumaAnti/cant;
	}
	Vuelo elMasInspeccionado() {
		Vuelo masInsp=this.vuelos[0];
		int cantMaxInsp=this.vuelos[0].cantDe("inspector");
		for(Vuelo v:this.vuelos) {
			if (v.cantDe()>cantMaxInsp) {
				masInsp=v;
				cantMaxInsp=v.cantDe();
			}
			
		}
		return masInsp;
	}
	int cantidadMaximaInsp() {
		int maxInsp=0;
		for(vuelo v: this.vuelos) {
			if(v.cantInsp()>maxInsp) {
				maxInsp=v.cantInsp();
			}
		}
		return maxInsp;
	}
	boolean hayVueloSobrecargado() {
		for(Vuelo v : this.vuelos) {
			if (estaSobrecargado() ){
				return true;
			}
			
		}
		
	}
	Tripulante pilotoDelMes() {
		tripulante pilotoMes=this.vuelos[0].tripulacion;
		int vuelosConPilotosMes=cant;
		for(Vuelo v: this.vuelos) {
			if(cantidadVuelosPilotos() > vuelosConPilotoMes){
				pilotoMes=v;
				cantMaxInsp=v.cantDe("inspector");
			}



public class Vuelo {
	Avion avion; 
	Tripulante[] tripulacion;
	public boolean estaTripulante(Tripulante t) {
		for(Tripulante tr:this.tripulacion) {
			if(tr.equals(t)) {
				return true;
			}
		}
		return false;
	}
	public int sumAntiguedad() {
		int cant=0;
		for(Tripulante tr:this.tripulacion) {
			cant +=tr.antiguedad;
			
		}
	}
	public int cantDe(String cargo) {
		int cantInsp= 0;
		for(tripulante t: this.tripulacion) {
			if(t.cargo.equals(cargo)) {
				cantInsp++;
			}
		}
		
	}
	public boolean estaSobrecargado() {
		return cantDe("Aeromozo")>
		this.avion.capacidad*0.1;
		
	}
}

